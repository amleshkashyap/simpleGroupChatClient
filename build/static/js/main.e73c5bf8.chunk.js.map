{"version":3,"sources":["Chat-Query.js","Chat.js","Group.js","Frontpage.js","Group-Query.js","User-Query.js","App.js","index.js"],"names":["ChatQuery","gql","CreateChatMutation","ChatSubscription","compose","graphql","name","props","chatBox","useRef","useState","chat","setChat","useEffect","subscribeToMore","document","variables","group_id","all_groups","updateQuery","prev","subscriptionData","data","newChat","chats","find","x","id","current","scrollToBottom","scrollIntoView","handleChange","e","a","target","value","handleSubmit","preventDefault","sender_email","sender_name","length","sender_id","chat_text","sent_at","Date","getTime","update","store","readQuery","query","push","writeQuery","error","loading","className","style","onClick","setStyle","map","item","key","chat_body","moment","fromNow","onSubmit","ref","margin","placeholder","fullWidth","onChange","variant","Group","groups","user","selectedGroup","selectGroupFunction","useCallback","Registration","email","token","setToken","setError","elevation","required","label","type","validator","isEmail","localStorage","JSON","stringify","GroupQuery","getItem","parse","receivingGroupId","receivingGroupName","receivingGroupState","setReceivingGroupState","hidden","setHidden","display","_id","group_name","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","lazy","inactivityTimeout","link","split","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e73c5bf8.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nconst ChatQuery = gql`\n  query {\n    chats {\n\tid\n\tchat_body\n\tsender_email\n\tsender_name\n\tgroup_id\n\tsent_at\n    }\n  }\n`;\n\nconst CreateChatMutation = gql`\n  mutation (\n    $sender_id: String!\n    $sender_email: String!\n    $sender_name: String!\n    $chat_text: String!\n    $group_id: String!\n    $sent_at: Float!\n  ) {\n    newChat (\n\tsender_id: $sender_id\n\tsender_email: $sender_email\n\tsender_name: $sender_name\n\tchat_text: $chat_text\n\tgroup_id: $group_id\n\tsent_at: $sent_at\n    ) {\n\tid\n\tchat_body\n\tsender_email\n\tsender_name\n\tsent_at\n\tgroup_id\n    }\n  }\n`;\n\nconst ChatSubscription = gql`\n  subscription(\n    $group_id: [ String! ]!\n  ) {\n    newChat(group_id: $group_id) {\n\tid\n\tchat_body\n\tsender_email\n\tsender_name\n\tsent_at\n\tgroup_id\n    }\n  }\n`;\n\nexport {\n  ChatQuery,\n  CreateChatMutation,\n  ChatSubscription,\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport TextField from '@material-ui/core/TextField';\nimport moment from 'moment';\nimport {\n  ChatQuery,\n  CreateChatMutation,\n  ChatSubscription\n} from './Chat-Query';\n\nconst Chat = props => {\n  const chatBox = useRef(null);\n\n  const [chat, setChat] = useState('');\n\n  const [timer, setTimer] = useState(null);\n\n  const handleShow = () => {\n    props.setStyle();\n  };\n\n  useEffect(() => {\n    props.chat.subscribeToMore({\n      document: ChatSubscription,\n      variables: {\n\tgroup_id: all_groups\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const chat = subscriptionData.data.newChat;\n        if (prev.chats.find(x => x.id === chat.id)) {\n          return prev;\n        }\n        return { ...prev, chats: [...prev.chats, chat] };\n      }\n    });\n    if (chatBox.current) {\n      scrollToBottom();\n    }\n  });\n\n  const scrollToBottom = () => {\n    chatBox.current.scrollIntoView();\n  };\n\n  const handleChange = async e => {\n    setChat(e.target.value);\n  };\n\n  const handleSubmit = async (e, chat) => {\n    setChat('');\n    e.preventDefault();\n    const { sender_email, sender_name, group_id } = props;\n    if (!chat.length) return null;\n    await props.newChat({\n      variables: {\n\tsender_id: \"5fc4fd303c879950a4419389\",\n\tsender_email: sender_email,\n\tsender_name: sender_name,\n\tgroup_id: group_id,\n\tchat_text: chat,\n\tsent_at: (new Date()).getTime()\n      },\n      update: (store, { data: { newChat } }) => {\n        const data = store.readQuery({ query: ChatQuery });\n        data.chats.push(newChat);\n        store.writeQuery({ query: ChatQuery, data });\n      }\n    });\n  };\n\n  const {\n    chat: { error, loading, chats },\n    all_groups,\n    group_id,\n    sender_email,\n    sender_name,\n  } = props;\n\n  if (error || loading) return null;\n\n  return (\n    <div className=\"personal-chat\" style={props.style}>\n      <div className=\"chats-header\">\n        <div className=\"back-button\" onClick={handleShow}>\n          <div className=\"bar1\" />\n          <div className=\"bar2\" />\n          <div className=\"bar3\" />\n        </div>\n      </div>\n      <div className=\"all-chats\">\n        {chats.map(item =>\n          (item.group_id === group_id) ? (\n            <div\n              key={item.id}\n              className={item.sender_email === sender_email ? 'sender' : 'receiver'}\n            >\n              <div className=\"sender-name\">{item.sender_name}</div>\n              {item.chat_body}{' '}\n              <span className=\"time\"> {moment(item.sent_at).fromNow()}</span>\n            </div>\n          ) : (\n            ''\n          )\n        )}\n      </div>\n      {group_id ? (\n        <form\n          onSubmit={e => handleSubmit(e, chat)}\n          ref={chatBox}\n          className=\"chat-box\"\n        >\n          <TextField\n            style={{ margin: 10 }}\n            placeholder={'Say something'}\n            fullWidth\n            name=\"chat\"\n\t    onChange={handleChange}\n            value={chat}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n        </form>\n      ) : (\n        <div className=\"select-chat\">\n          Select a group from the left panel\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default compose(\n  graphql(ChatQuery, { name: 'chat' }),\n  graphql(CreateChatMutation, { name: 'newChat' }),\n)(Chat);\n","import React, { useCallback } from \"react\";\nimport Button from \"@material-ui/core/Button\";\n\nconst Group = props => {\n  const { groups, user, selectedGroup } = props;\n\n  const selectGroupFunction = useCallback((id, name) => {\n    selectedGroup(id, name);\n  }, [selectedGroup]);\n\n  return (\n    <div className=\"group-welcome\" style={props.style}>\n      <div className=\"group-heading\">\n\t<p>Hello, {user.name}</p>\n      </div>\n      <div className=\"select-group\">\n        {groups.map(item =>\n            <div\n              key={item.id}\n              className=\"groups\"\n              onClick={() => selectGroupFunction(item.id, item.name)}\n            >\n              {item.name}\n            </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Group;\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport validator from \"validator\";\n\nconst Registration = props => {\n  const [token, setToken] = useState({ name: \"\", email: \"\" });\n  const [error, setError] = useState(\"\");\n\n  const handleChange = e => {\n    setToken({ ...token, [e.target.name]: e.target.value });\n  };\n\n  const validate = () => {\n    const { name, email } = token;\n\n    if (!name.length) {\n      setError(\"Name is required\");\n    }\n\n    if (!validator.isEmail(email)) {\n      setError(\"Valid email is required\");\n    }\n\n    if (name.length && validator.isEmail(email)) {\n      setError(\"\");\n      localStorage[\"token\"] = JSON.stringify(token);\n    }\n\n  };\n\n  const { name, email } = token;\n  return (\n    <Paper elevation={3} className=\"paper\">\n      User Details\n      <TextField\n        required\n        id=\"outlined-name\"\n        label=\"Name\"\n        name=\"name\"\n        value={name}\n        onChange={handleChange}\n        variant=\"outlined\"\n        style={{ margin: 10 }}\n      />\n      <TextField\n        required\n        id=\"outlined-email-input\"\n        type=\"email\"\n        label=\"Email\"\n        name=\"email\"\n        value={email}\n        onChange={handleChange}\n        variant=\"outlined\"\n        className=\"text-area\"\n        style={{ margin: 10 }}\n      />\n      <Button variant=\"contained\" onClick={validate} style={{ margin: 15 }}>\n        Enter Chat\n      </Button>\n      <div>{error}</div>\n    </Paper>\n  );\n};\n\nexport default Registration;\n","import gql from 'graphql-tag';\n\nconst GroupQuery = gql`\n  query {\n    groups {\n\tid\n\tname\n    }\n   }\n`;\n\nexport {\n  GroupQuery,\n};\n","import gql from 'graphql-tag';\n\nconst UserQuery = gql`\n  query {\n    users {\n\tid\n\tname\n\temail\n    }\n   }\n`;\n\nexport {\n  UserQuery,\n};\n","import React, { useState, useEffect } from 'react';\nimport Chat from './Chat';\nimport User from './User';\nimport Group from './Group';\nimport Registration from './Frontpage';\nimport { graphql, compose } from 'react-apollo';\nimport { GroupQuery } from './Group-Query';\nimport { UserQuery } from './User-Query';\n\nconst App = props => {\n  const user =\n    (localStorage.getItem('token') &&\n      JSON.parse(localStorage.getItem('token'))) ||\n    {};\n\n  const [receivingGroupState, setReceivingGroupState] = useState({\n    receivingGroupId: '',\n    receivingGroupName: ''\n  });\n\n  const [hidden, setHidden] = useState(false);\n\n  const setSelectedGroup = (id, name) => {\n    setReceivingGroupState(receivingGroupState => {\n      return { ...receivingGroupState, receivingGroupId: id, receivingGroupName: name };\n    });\n    setHidden(!hidden);\n  };\n\n  const setStyle = () => {\n    setHidden(!hidden);\n  };\n\n  const { receivingGroupId, receivingGroupName } = receivingGroupState;\n  const {\n    data: { groups, error, loading }\n  } = props;\n\n  if (loading || error) return null;\n  if (localStorage.getItem('token')) {\n    return (\n      <div className=\"chat-page\">\n        <Group\n          style={{ display: hidden ? 'none' : 'block' }}\n          groups={groups}\n\t  user={user}\n\t  selectedGroup={setSelectedGroup}\n        />\n        <Chat\n          style={{ display: hidden ? 'block' : 'none' }}\n          sender_email={user.email}\n\t  sender_id={user._id}\n\t  sender_name={user.name}\n\t  all_groups={groups.map(item => item.id)}\n\t  group_id={receivingGroupId}\n\t  group_name={receivingGroupName}\n          setStyle={setStyle}\n        />\n      </div>\n    );\n  }\n  return <Registration />;\n};\n\nexport default compose(\n  graphql(GroupQuery)\n)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { split } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport App from \"./App\";\n\nimport \"./index.css\";\n\n// Create an http link:\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4000/'\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000/`,\n  options: {\n    reconnect: true,\n    lazy: true,\n    inactivityTimeout: 30000,\n  }\n});\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return kind === 'OperationDefinition' && operation === 'subscription';\n  },\n  wsLink,\n  httpLink,\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}